#!/usr/bin/env node

const os = require('os');
const path = require('path');
const chalk = require('chalk');
const pkg = require(path.resolve(__dirname, '..', 'package.json'));

const { isHumanError } = require('../dist/src/server/errors');
const { findPackageJson } = require('../dist/src/server/npm');
const { Project } = require('../dist/src/server/project');
const packageDir = findPackageJson(process.cwd()) || process.cwd();

let packageJson = {};
try {
  packageJson = require(packageDir);
} catch (e) {}

const hoistEnv = ['api', 'profile', 'project', 'connect_channel'];

function optionDefault(opt, defaultValue) {
  return process.env[`MIIX_${opt.toUpperCase()}`] || defaultValue;
}

const execute = argv => {
  hoistEnv.forEach(opt => {
    if (argv[opt] !== undefined) {
      process.env[`MIIX_${opt.toUpperCase()}`] = argv[opt];
    }
  });

  argv.project = new Project(process.env.MIIX_PROFILE, process.env.MIIX_PROJECT);

  Promise.resolve(require(`../dist/src/cli/commands/${argv._[0]}`).default(argv))
    .then(() => process.exit(0))
    .catch(err => {
      if (isHumanError(err)) {
        console.error(err.getHumanMessage());
      } else {
        const message = String(err.stack || err.message || err);
        console.error(err.dontColor ? message : chalk.red(message));
      }

      process.exit(1);
    });
};

const yargs = require('yargs')
  .version(pkg.version)
  .option('profile', {
    description: 'Profile to use, stores authentication and config credentials',
    default: optionDefault('profile', path.join(os.homedir(), '.miixrc')),
  })
  .option('project', {
    description: 'Path to your interactive project',
    default: optionDefault('project', path.dirname(packageDir)),
  })
  .option('api', {
    description: 'Mixer API address',
    default: optionDefault('api', 'https://mixer.com'),
  })
  .command('login', 'Authenticates your machine with Mixer', {}, execute)
  .command('logout', 'Clears your Mixer profile from this machine', {}, execute)
  .command('whoami', 'Prints your Mixer username and ID', {}, execute)
  .command(
    'serve',
    'Boots up an interactive development server.',
    argv =>
      argv
        .usage('miix serve [-- <webpack-dev-server args>]')
        .example('miix serve', 'Boot a server on http://localhost:8080')
        .example(
          'miix serve -- --port=1234',
          'Pass in custom webpack-dev-server arguments (see webpack-dev-server --help)'
        ),
    execute
  )
  .command(
    'pack',
    'Creates a packaged version of your controls as uploaded in `miix publish`. Useful for debugging.',
    {},
    execute
  )
  .command(
    'upload',
    'Uploads your controls to Mixer so you can use them on your channel. Controls are private until you run `miix publish`.',
    argv =>
      argv.option('tarball', {
        description:
          'Control archive to upload as created with `miix pack`. ' +
          'Will be created automatically if one is not specified.',
        alias: 't',
      }),
    execute
  )
  .command(
    'unpublish',
    'Unpublishes a previously-published version of your Interactive controls.',
    argv =>
      argv
        .option('package', {
          description: 'The package name and version to unpublish',
          default: `${packageJson.name}@${packageJson.version}`,
          alias: 'p',
        })
        .option('force', {
          alias: 'f',
          description: 'Skip confirmation prompt',
          type: 'boolean',
        }),
    execute
  )
  .command(
    'publish',
    'Makes your control bundle accessible to everyone on Mixer.',
    argv =>
      argv
        .option('tarball', {
          description:
            'Control archive to upload as created with `miix pack`. ' +
            'Will be created automatically if one is not specified.',
          alias: 't',
        })
        .option('skip-bundle', {
          description: 'Publishes an existing version without recreating the bundle',
          alias: 's',
          type: 'boolean',
        })
        .option('force', {
          alias: 'f',
          description: 'Skip confirmation prompt',
          type: 'boolean',
        }),
    execute
  )
  .command(
    'info <bundle>',
    'Displays info about a bundle on Mixer',
    argv =>
      argv
        .option('json', {
          description: 'Use plain JSON for the output',
        })
        .option('verbose', {
          description: 'Print version metadata too.',
          alias: 'v',
        })
        .demand('bundle'),
    execute
  )
  .command(
    'quickstart <projectName> [kind]',
    'Creates a base project for building interactive controls',
    argv =>
      argv
        .option('kind', {
          description: 'The template to use for this quickstart, one of "html" or "preact"',
          default: 'preact',
        })
        .option('dir', {
          description:
            'The folder to extract into. Will be created if it does ' +
            'not exist. Defaults to ./<projectName>',
        })
        .option('npm', {
          description: 'npm path to use when installing the quickstart dependencies',
          default: /^win/.test(process.platform) ? 'npm.cmd' : 'npm',
        })
        .demand('projectName'),
    execute
  )
  .command('debug-metadata', false, {}, execute)
  .strict()
  .help()
  .demandCommand().argv;
